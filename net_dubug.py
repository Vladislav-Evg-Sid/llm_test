import os
os.environ["HF_HUB_DISABLE_PROGRESS_BARS"] = "1"
os.environ["TRANSFORMERS_VERBOSITY"] = "error"

from transformers import GPT2LMHeadModel, GPT2Tokenizer
import torch
import time
import sys

print("=== –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò –ú–û–î–ï–õ–ò ===")

def test_model_loading():
    print("1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä...")
    sys.stdout.flush()
    
    start = time.time()
    try:
        tokenizer = GPT2Tokenizer.from_pretrained(
            "sberbank-ai/rugpt3small_based_on_gpt2",
            local_files_only=False  # –†–∞–∑—Ä–µ—à–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        )
        tokenizer.pad_token = tokenizer.eos_token
        print(f"   ‚úÖ –¢–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω –∑–∞ {time.time()-start:.1f}—Å–µ–∫")
        sys.stdout.flush()
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞: {e}")
        return False

    print("2. –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å...")
    sys.stdout.flush()
    
    start = time.time()
    try:
        model = GPT2LMHeadModel.from_pretrained(
            "sberbank-ai/rugpt3small_based_on_gpt2",
            torch_dtype=torch.float32,
            local_files_only=False
        )
        model.eval()
        print(f"   ‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞ {time.time()-start:.1f}—Å–µ–∫")
        sys.stdout.flush()
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏: {e}")
        return False

    print("3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
    sys.stdout.flush()
    
    try:
        inputs = tokenizer.encode("–ü—Ä–∏–≤–µ—Ç", return_tensors="pt")
        with torch.no_grad():
            outputs = model.generate(inputs, max_new_tokens=10)
        response = tokenizer.decode(outputs[0], skip_special_tokens=True)
        print(f"   ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç: '{response}'")
        return True
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    success = test_model_loading()
    if success:
        print("\nüéâ –í–°–Å –†–ê–ë–û–¢–ê–ï–¢! –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–≤–æ—ë–º –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ")
    else:
        print("\nüí• –ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –º–æ–¥–µ–ª–∏")