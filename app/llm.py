from transformers import GPT2LMHeadModel, GPT2Tokenizer
import torch


class LlamaChatbot:
    _instance = None
    _initialized = False

    def __init__(self, name="sberbank-ai/rugpt3small_based_on_gpt2"):
        if LlamaChatbot._initialized:
            return
            
        print("‚ö° –ó–∞–≥—Ä—É–∑–∫–∞ —É–ª—å—Ç—Ä–∞-–ª—ë–≥–∫–æ–π –º–æ–¥–µ–ª–∏...")
        
        self.tokenizer = GPT2Tokenizer.from_pretrained(name)
        self.tokenizer.pad_token = self.tokenizer.eos_token
        
        self.model = GPT2LMHeadModel.from_pretrained(
            name,
            torch_dtype=torch.float32
        )
        self.model.eval()
        
        LlamaChatbot._initialized = True
        print("‚úÖ –£–ª—å—Ç—Ä–∞-–ª—ë–≥–∫–∞—è –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")

    @classmethod
    def get_instance(cls):
        if cls._instance is None:
            cls._instance = LlamaChatbot()
        return cls._instance
    
    def generate_response(self, user_input):
        inputs = self.tokenizer.encode(user_input, return_tensors="pt")
        
        with torch.no_grad():
            outputs = self.model.generate(
                inputs,
                max_new_tokens=100,
                do_sample=True,
                temperature=0.7,
                pad_token_id=self.tokenizer.eos_token_id
            )
        
        response = self.tokenizer.decode(outputs[0], skip_special_tokens=True)
        return response.replace(user_input, "").strip()


if __name__ == "__main__":
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ç–µ–Ω–¥–∞ –¥–ª—è LlamaChatbot")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
    print("1. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω...")
    bot1 = LlamaChatbot.get_instance()
    bot2 = LlamaChatbot.get_instance()
    
    print(f"   bot1 id: {id(bot1)}")
    print(f"   bot2 id: {id(bot2)}")
    print(f"   –≠—Ç–æ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –æ–±—ä–µ–∫—Ç: {bot1 is bot2}")
    
    print("\n" + "=" * 50)
    
    # –¢–µ—Å—Ç 2: –•–∞—Ä–¥–∫–æ–¥–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = [
        "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç?",
        "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ä–∞—Å—Å–∫–∞–∑ –ø—Ä–æ –∫–æ—Ç–∞",
        "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2+2?",
        "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?"
    ]
    
    print("2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–æ–≤:")
    print("-" * 30)
    
    for i, query in enumerate(test_queries, 1):
        print(f"\nüìù –¢–µ—Å—Ç {i}:")
        print(f"üë§ –í–æ–ø—Ä–æ—Å: {query}")
        
        try:
            response = bot1.generate_response(query)
            print(f"ü§ñ –û—Ç–≤–µ—Ç: {response}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print("-" * 30)
    
    print("\n" + "=" * 50)
    
    # –¢–µ—Å—Ç 3: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    print("3. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º (–¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ '–≤—ã—Ö–æ–¥' –∏–ª–∏ 'quit')")
    print("-" * 40)
    
    while True:
        user_input = input("\nüë§ –í–∞—à –≤–æ–ø—Ä–æ—Å: ").strip()
        
        if user_input.lower() in ['–≤—ã—Ö–æ–¥', 'quit', 'exit', '']:
            print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            break
            
        if user_input:
            try:
                response = bot1.generate_response(user_input)
                print(f"ü§ñ –û—Ç–≤–µ—Ç: {response}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        else:
            print("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞")
    
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")