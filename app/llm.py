from transformers import AutoModelForCausalLM, AutoTokenizer, pipeline
import torch
import warnings


class LlamaChatbot:
    _instance = None
    _initialized = False

    def __init__(self, model_name="TinyLlama/TinyLlama-1.1B-Chat-v1.0"):
        if LlamaChatbot._initialized:
            return
        print("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –ª—ë–≥–∫–æ–π –º–æ–¥–µ–ª–∏...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä
        self.tokenizer = AutoTokenizer.from_pretrained(
            model_name,
            trust_remote_code=True
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pad_token –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if self.tokenizer.pad_token is None:
            self.tokenizer.pad_token = self.tokenizer.eos_token
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏ –¥–ª—è CPU
        self.model = AutoModelForCausalLM.from_pretrained(
            model_name,
            torch_dtype=torch.float32,
            device_map="cpu",
            low_cpu_mem_usage=True,
            trust_remote_code=True
        )
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
        self.model.eval()
        
        # –°–æ–∑–¥–∞—ë–º –ø–∞–π–ø–ª–∞–π–Ω –¥–ª—è —É–ø—Ä–æ—â—ë–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        self.pipe = pipeline(
            "text-generation",
            model=self.model,
            tokenizer=self.tokenizer,
            torch_dtype=torch.float32,
            device="cpu"
        )
        
        self.history = []
        print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        LlamaChatbot._initialized = True

    @classmethod
    def get_instance(cls):
        if cls._instance is None:
            cls._instance = LlamaChatbot()
        return cls._instance

    def generate_response(self, user_input):
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º—Ç –¥–ª—è —á–∞—Ç–∞
            if self.history:
                conversation = "\n".join([f"{'User' if i % 2 == 0 else 'Assistant'}: {msg['content']}" 
                                        for i, msg in enumerate(self.history[-4:])])  # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–æ–æ–±—â–µ–Ω–∏—è
                prompt = f"{conversation}\nUser: {user_input}\nAssistant:"
            else:
                prompt = f"User: {user_input}\nAssistant:"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            outputs = self.pipe(
                prompt,
                max_new_tokens=150,
                do_sample=True,
                temperature=0.7,
                top_p=0.9,
                repetition_penalty=1.1,
                pad_token_id=self.tokenizer.eos_token_id,
                num_return_sequences=1
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
            full_text = outputs[0]['generated_text']
            response = full_text.replace(prompt, "").strip()
            
            # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ª–∏—à–Ω–µ–≥–æ
            if "\nUser:" in response:
                response = response.split("\nUser:")[0]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            self.history.append({"role": "user", "content": user_input})
            self.history.append({"role": "assistant", "content": response})
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            if len(self.history) > 10:
                self.history = self.history[-10:]
                
            return response
            
        except Exception as e:
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"

# # Example Usage
# if __name__ == "__main__":
#     test = input()
#     if test == "n":
#         exit(0)
#     print("start")
#     chatbot = LlamaChatbot()

#     user_input = "–ü—Ä–∏–≤–µ—Ç. –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –ø—Ä–æ —Ç–µ–æ—Ä–µ–º—É –ü–∏—Ñ–∞–≥–æ—Ä–∞"
#     print(f"User: {user_input}")
#     response = chatbot.generate_response(user_input)
#     print(f"Bot: {response}")
#     print("----------------------")
#     print("–í–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
#     user_input = input()
#     response = chatbot.generate_response(user_input)
#     print(f"Bot: {response}")
#     print("----------------------")
